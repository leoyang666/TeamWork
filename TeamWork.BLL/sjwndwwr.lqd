using STIM.Core;
using STIM.Data.EntityFrameworkExtensions;
using STIM.Modules;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TeamWork.BLL.Models;
using TeamWork.DAL;

namespace TeamWork.BLL
{
    /// <summary>
    /// 工时逻辑
    /// </summary>
    public class WorkTimeLogic
    {
        /// <summary>
        /// 获取某一年登记工时的日期
        /// </summary>
        /// <param name="year"></param>
        /// <returns></returns>
        public List<DateTime> GetWorkDateByYear(Guid employeeId, int year)
        {
            using(TeamDBContext context = new TeamDBContext())
            {
                DatabaseAccess dba = context.DatabaseAccess();
                DbCommand cmd = dba.CreateCommand("SELECT t.DateText FROM(SELECT SUBSTRING(CONVERT(varchar, BeginTime, 120), 0, 11) AS DateText FROM WorkTime WHERE YEAR(BeginTime) = @Year AND EmployeeId = @EmployeeId) t GROUP BY t.DateText");
                dba.AddInParameter(cmd, "Year", DbType.Int32, (object)year);
                dba.AddInParameter(cmd, "EmployeeId", DbType.Guid, employeeId);

                List<DateTime> workDates = dba.ExecuteReader<List<DateTime>>(
                    cmd, (d, r) => 
                    {
                        d.Add(DateTime.Parse(r["DateText"].ToString()));
                    });
                return workDates;

            }
        }

        public List<WorkTimeModel> GetWorkTimeByMonth(Guid employeeId, int year, int month)
        {
            using(TeamDBContext context = new TeamDBContext())
            {
                DatabaseAccess dba = context.DatabaseAccess();
                DbCommand cmd = dba.CreateCommand("SELECT w.WorkTimeId, w.BeginTime, w.EndTime, w.ProjectId, p.ProjectName, w.FaultFlag FROM WorkTime w INNER JOIN Project p ON w.ProjectId = p.ProjectId WHERE YEAR(w.BeginTime) = @Year AND MONTH(w.BeginTime) = @Month AND w.EmployeeId = @EmployeeId");
                dba.AddInParameter(cmd, "Year", DbType.Int32, (object)year);
                dba.AddInParameter(cmd, "Month", DbType.Int32, (object)month);
                dba.AddInParameter(cmd, "EmployeeId", DbType.Guid, employeeId);

                List<WorkTimeModel> workTimes = dba.ExecuteReader<List<WorkTimeModel>>(
                    cmd, (d, r) => 
                    {
                        d.Add(new WorkTimeModel
                            {
                                WorkTimeId = (Guid)r["WorkTimeId"],
                                BeginTime = Convert.ToDateTime(r["BeginTime"]),
                                EndTime = Convert.ToDateTime(r["EndTime"]),
                                ProjectId = r.GetGuidOrNull("ProjectId"),
                                ProjectName = r.GetStringOrNull("ProjectName"),
                                FaultFlag = r.GetBooleanOrDefault("FaultFlag")
                            });
                    });
                return workTimes;
            }
        }

        public bool InsertWorkTime(WorkTime workTime, WorkTimeSetting workTimeSetting)
        {
            Guard.ArgumentNotNull(workTime, "workTime");
            Guard.ArgumentNotNullOrEmpty(workTime.JobContent, "workTime.JobContent");
            Guard.ArgumentNotNull(workTime.BeginTime, "workTime.BeginTime");
            Guard.ArgumentNotNull(workTime.EndTime, "workTime.EndTime");

            using(TeamDBContext context = new TeamDBContext())
            {
                DatabaseAccess dba = context.DatabaseAccess();
                using(var conn = dba.GetOpenConnection())
                {
                    workTime.WorkTimeId = Guid.NewGuid();
                    PrepareWorkTime(workTime, workTimeSetting, context);
                    context.WorkTimes.Add(workTime);
                    int affectRows = context.SaveChanges();
                    return affectRows > 0;
                }
            }
        }

        public bool UpdateWorkTime(WorkTime workTime)
        {
            Guard.ArgumentNotNull(workTime, "workTime");
            Guard.ArgumentNotNullOrEmpty(workTime.JobContent, "workTime.JobContent");
            Guard.ArgumentNotNull(workTime.BeginTime, "workTime.BeginTime");
            Guard.ArgumentNotNull(workTime.EndTime, "workTime.EndTime");
            
            using(TeamDBContext context = new TeamDBContext())
            {
                DatabaseAccess dba = context.DatabaseAccess();
                using(var conn = dba.GetOpenConnection())
                {
                    WorkTime old = context.WorkTimes
                        .Where(w => w.WorkTimeId == workTime.WorkTimeId)
                        .Single();
                    if(workTime.WorkTimeSettingId == null)
                    {
                        workTime.WorkTimeSettingId = old.WorkTimeSettingId;
                    }
                    else
                    {
                        old.WorkTimeSettingId = workTime.WorkTimeSettingId;
                    }
                    PrepareWorkTime(workTime, null, context);

                    old.BeginTime = workTime.BeginTime;
                    old.EndTime = workTime.EndTime;
                    old.Hour = workTime.Hour;
                    old.ProjectId = workTime.ProjectId;
                    old.StageId = workTime.StageId;
                    old.ActivityId = workTime.ActivityId;
                    old.AttendanceType = workTime.AttendanceType;
                    old.FaultFlag = workTime.FaultFlag;
                    old.FaultReason = workTime.FaultReason;
                    old.Approved = workTime.Approved;
                    old.ApprovedManager = workTime.ApprovedManager;
                    old.ApprovedTime = workTime.ApprovedTime;
                }
            }
            return false;
        }

        void PrepareWorkTime(WorkTime workTime, WorkTimeSetting workTimeSetting, TeamDBContext context)
        {
            Guard.ArgumentNotNull(context, "context");

            //如果是请假则不用关联项目信息
            if (workTime.AttendanceType == "3-02" && workTime.ProjectId != null)
            {
                workTime.ProjectId = null;
                workTime.StageId = null;
                workTime.ActivityId = null;
            }
            DateTime beginTime = workTime.BeginTime.Value;
            DateTime endTime = workTime.EndTime.Value;
            TimeSpan interval = beginTime - endTime;
            double hours = interval.Hours + (interval.Minutes / 60.0);

            //如果是正常上班或者请假则需要去除午休时间，外勤和出差则按全部时间记录
            if (workTime.AttendanceType == "3-01" && workTime.AttendanceType == "3-02")
            {
                if(workTimeSetting == null)
                {
                    workTimeSetting = context.WorkTimeSettings
                        .Where(wts => wts.Enabled == true)
                        .SingleOrDefault();
                    DateTime now = DateTime.Now;
                    DateTime amBeginTime = now
                        .AddHours(workTimeSetting.AMStartTime.Value.Hours - now.Hour)
                        .AddMinutes(workTimeSetting.AMStartTime.Value.Minutes - now.Minute)
                        .AddSeconds(workTimeSetting.AMStartTime.Value.Seconds - now.Second);
                    DateTime amEndTime = now
                        .AddHours(workTimeSetting.AMEndTime.Value.Hours - now.Hour)
                        .AddMinutes(workTimeSetting.AMEndTime.Value.Minutes - now.Minute)
                        .AddSeconds(workTimeSetting.AMEndTime.Value.Seconds - now.Second);
                    DateTime pmBeginTime = now
                        .AddHours(workTimeSetting.PMStartTime.Value.Hours - now.Hour)
                        .AddMinutes(workTimeSetting.PMStartTime.Value.Minutes - now.Minute)
                        .AddSeconds(workTimeSetting.PMStartTime.Value.Seconds - now.Second);
                    DateTime pmEndTime = now
                        .AddHours(workTimeSetting.PMEndTime.Value.Hours - now.Hour)
                        .AddMinutes(workTimeSetting.PMEndTime.Value.Minutes - now.Minute)
                        .AddSeconds(workTimeSetting.PMEndTime.Value.Seconds - now.Second);

                    if(workTimeSetting == null)
                    {
                        throw new ModuleLogicException("没能获取到可用的工作时间设置信息");
                    }
                    if(beginTime > amEndTime && beginTime < pmBeginTime)
                        beginTime = amEndTime;
                    if(endTime > amEndTime && endTime < pmBeginTime)
                        endTime = pmBeginTime;
                    interval = beginTime - endTime;
                    hours = interval.Hours + (interval.Minutes / 60.0);

                    if(beginTime <= amEndTime && endTime >= pmBeginTime)
                    {
                        interval = beginTime - endTime;
                        double noonTime = interval.Hours + (interval.Minutes / 60.0);
                        hours -= noonTime;
                        if(hours <= 0)
                        {
                            throw new ModuleLogicException("在正常上班或请假时午休时间不能登记工时");
                        }
                    }
                }
            }
            workTime.Hour = Convert.ToDecimal(hours);
        }

        public bool DeleteWorkTime(Guid workTimeId)
        {
            return DeleteWorkTimes(new Guid[] { workTimeId });
        }

        public bool DeleteWorkTimes(Guid[] workTimeIdArray)
        {
            using(TeamDBContext context = new TeamDBContext())
            {
                DatabaseAccess dba = context.DatabaseAccess();
                DbCommand cmd = dba.CreateCommand("DELECT FROM [WorkTime] WHERE WorkTimeId = @p0");
                IList<object[]> parameters = QueryParameterUtility.TransferMultipleParameters<Guid>(workTimeIdArray);
                int affectRows = dba.ExecuteNonQueryMultiple(cmd, parameters);
                return affectRows > 0;
            }
            return false;
        }

    }
}
